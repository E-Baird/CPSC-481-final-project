@page "/scheduler/{MachineName}"
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage

@using Microsoft.AspNetCore.Components.Rendering
@using System;
@using System.Text.RegularExpressions;
@inject NavigationManager NavMan;

<PageTitle>Booking a @MachineName</PageTitle>

<h1 class="text-center">Booking a @MachineName</h1>

<div class="back">
    <button type="button" onclick="history.back()" class="btn btn-danger">Back</button>
</div>

<div class="d-flex">
	@if(isNewUser == "true") {
        <Workflow
            CurrentStep="currentWorkflowStep"
        />
    }

	<div class="form-wrapper">
		<h3 class="text-center mb-5">Booking Details</h3>
		<div class="mb-3 row">
			<label for="staticDate" class="col-sm-2 col-form-label">Date:</label>
			<div class="col-sm-10">
				<input class="form-control form-control-sm @dateErrorClass" type="date" disabled=@isBooked value=@selectedDate>
				@if (dateErrorClass != "")
				{
					<div class="invalid-feedback">Please select a date on the scheduler.</div>
				}
			</div>
			<label for="staticDate" class="col-sm-2 col-form-label">From:</label>
			<div class="col-sm-10">
				<input class="form-control form-control-sm" type="time" disabled=@isBooked @bind="selectedStartTime" @bind:format="HH:mm">
			</div>
			<label for="staticDate" class="col-sm-2 col-form-label">To:</label>
			<div class="col-sm-10 mb-5">
				<input class="form-control form-control-sm" type="time" disabled=@isBooked @bind="selectedEndTime" @bind:format="HH:mm">
			</div>
			<label class="col-sm-2 col-form-label">Name</label>
		    <div class="col-sm-10 mb-3">
			    <input type="text" class="form-control @nameErrorClass" disabled=@isBooked @bind=@name/>
				    @if (nameErrorClass != "")
                    {
                       <div class="invalid-feedback">Please provide your name.</div>
                    }
		    </div>
            <label class="col-sm-2 col-form-label">Email</label>
		    <div class="col-sm-10 mb-3">
			    <input type="text" class="form-control @emailErrorClass" disabled=@isBooked @bind=@email/>
				    @if (emailErrorClass != "")
                    {
                       <div class="invalid-feedback">Please provide your UCalgary email.</div>
                    }
		    </div>
            <label class="col-sm-2 col-form-label">UCID</label>
            <div class="col-sm-10 mb-3">
			    <input type="text" class="form-control @ucidErrorClass" disabled=@isBooked @bind-value=@ucid @bind-value:event="oninput"/>
				@if (ucidErrorClass != "")
                {
                    <div class="invalid-feedback">Please provide your UCID.</div>
                }
				
				@if (validUCID(@ucid)) {
                    if (ucidCompletedSafety(@ucid)){
                        <p id="completed">Safety orientation completed</p>
                    } else {
                        <p id="noSafety">
                            The UCID you have entered has not completed the mandatory
                            safety orientation. Please sign up for one through the workshop
                            & Events page.
                        </p>
                    }
                } else if (!(ucid.Length == 8) && ucid.Length > 0) {
                    <p id="noSafety">Not valid UCID</p>
                }
            </div>
			@if (isBooked){
				<div>
					@confirmationMessage
				</div>
				<div class="row justify-content-between"> 
					<button class="btn col-3" id="cal" @onclick="@(() => calendarRedirect(@MachineName + " Booking", @formattedDate, @times, @descriptionMessage))">
						Add to Calendar
					</button>
					<button class="btn col-3" id="home" @onclick="@(()=>NavMan.NavigateTo("/"))">
						Back to Homepage
					</button>
				</div>
			}
			else{
				<button class="btn btn-primary col-3 mt-1" id="confirm" role="button" @onclick="()=>book(name, email, ucid)"
				>
					Book it!
				</button>
			}
			
		</div>
	</div>

	<div class="calendar-wrapper">
		<div class="mx-auto">
			<Estimator />
		</div>

		<div class="wrapper">
			<main>

				<div class="toolBar">
					<button type="button" class="btn btn-primary" disabled=@isBooked @onclick="() => prevWeek(currentweek[0])">Previous</button>
					<div class="currentMonth">@currentWeekTitle</div>
					<button type="button" class="btn btn-primary" disabled=@isBooked @onclick="() => nextWeek(currentweek[0])">Next</button>
				</div>

				<div class="calendar">
					<div class="calendarHeader">
						<div>Time</div>
						<div>@currentweek[0]</div>
						<div>@currentweek[1]</div>
						<div>@currentweek[2]</div>
						<div class=@wednesdayClass>@currentweek[3]</div>
						<div>@currentweek[4]</div>
						<div>@currentweek[5]</div>
						<div>@currentweek[6]</div>
					</div>

					<div class="calendarHourRow">
						<div class="calendarWeekday" id="time">10:00am</div>
						<div class="calendarWeekday" @onclick="() => occupy(0,0)" id=@statuses[0,0]>@textLabels[0,0]</div>
						<div class="calendarWeekday" @onclick="() => occupy(0,1)" id=@statuses[0,1]>@textLabels[0,1]</div>
						<div class="calendarWeekday" @onclick="() => occupy(0,2)" id=@statuses[0,2]>@textLabels[0,2]</div>
						<div class="calendarWeekday" @onclick="() => occupy(0,3)" id=@statuses[0,3]>@textLabels[0,3]</div>
						<div class="calendarWeekday" @onclick="() => occupy(0,4)" id=@statuses[0,4]>@textLabels[0,4]</div>
						<div class="calendarWeekday" @onclick="() => occupy(0,5)" id=@statuses[0,5]>@textLabels[0,5]</div>
						<div class="calendarWeekday" @onclick="() => occupy(0,6)" id=@statuses[0,6]>@textLabels[0,6]</div>
					</div>
					<div class="calendarHourRow">
						<div class="calendarWeekday" id="time">11:00am</div>
						<div class="calendarWeekday" @onclick="() => occupy(1,0)" id=@statuses[1,0]>@textLabels[1,0]</div>
						<div class="calendarWeekday" @onclick="() => occupy(1,1)" id=@statuses[1,1]>@textLabels[1,1]</div>
						<div class="calendarWeekday" @onclick="() => occupy(1,2)" id=@statuses[1,2]>@textLabels[1,2]</div>
						<div class="calendarWeekday" @onclick="() => occupy(1,3)" id=@statuses[1,3]>@textLabels[1,3]</div>
						<div class="calendarWeekday" @onclick="() => occupy(1,4)" id=@statuses[1,4]>@textLabels[1,4]</div>
						<div class="calendarWeekday" @onclick="() => occupy(1,5)" id=@statuses[1,5]>@textLabels[1,5]</div>
						<div class="calendarWeekday" @onclick="() => occupy(1,6)" id=@statuses[1,6]>@textLabels[1,6]</div>
					</div>
					<div class="calendarHourRow">
						<div class="calendarWeekday" id="time">12:00pm</div>
						<div class="calendarWeekday" @onclick="() => occupy(2,0)" id=@statuses[2,0]>@textLabels[2,0]</div>
						<div class="calendarWeekday" @onclick="() => occupy(2,1)" id=@statuses[2,1]>@textLabels[2,1]</div>
						<div class="calendarWeekday" @onclick="() => occupy(2,2)" id=@statuses[2,2]>@textLabels[2,2]</div>
						<div class="calendarWeekday" @onclick="() => occupy(2,3)" id=@statuses[2,3]>@textLabels[2,3]</div>
						<div class="calendarWeekday" @onclick="() => occupy(2,4)" id=@statuses[2,4]>@textLabels[2,4]</div>
						<div class="calendarWeekday" @onclick="() => occupy(2,5)" id=@statuses[2,5]>@textLabels[2,5]</div>
						<div class="calendarWeekday" @onclick="() => occupy(2,6)" id=@statuses[2,6]>@textLabels[2,6]</div>
					</div>
					<div class="calendarHourRow">
						<div class="calendarWeekday" id="time">1:00pm</div>
						<div class="calendarWeekday" @onclick="() => occupy(3,0)" id=@statuses[3,0]>@textLabels[3,0]</div>
						<div class="calendarWeekday" @onclick="() => occupy(3,1)" id=@statuses[3,1]>@textLabels[3,1]</div>
						<div class="calendarWeekday" @onclick="() => occupy(3,2)" id=@statuses[3,2]>@textLabels[3,2]</div>
						<div class="calendarWeekday" @onclick="() => occupy(3,3)" id=@statuses[3,3]>@textLabels[3,3]</div>
						<div class="calendarWeekday" @onclick="() => occupy(3,4)" id=@statuses[3,4]>@textLabels[3,4]</div>
						<div class="calendarWeekday" @onclick="() => occupy(3,5)" id=@statuses[3,5]>@textLabels[3,5]</div>
						<div class="calendarWeekday" @onclick="() => occupy(3,6)" id=@statuses[3,6]>@textLabels[3,6]</div>
					</div>
					<div class="calendarHourRow">
						<div class="calendarWeekday" id="time">2:00pm</div>
						<div class="calendarWeekday" @onclick="() => occupy(4,0)" id=@statuses[4,0]>@textLabels[4,0]</div>
						<div class="calendarWeekday" @onclick="() => occupy(4,1)" id=@statuses[4,1]>@textLabels[4,1]</div>
						<div class="calendarWeekday" @onclick="() => occupy(4,2)" id=@statuses[4,2]>@textLabels[4,2]</div>
						<div class="calendarWeekday" @onclick="() => occupy(4,3)" id=@statuses[4,3]>@textLabels[4,3]</div>
						<div class="calendarWeekday" @onclick="() => occupy(4,4)" id=@statuses[4,4]>@textLabels[4,4]</div>
						<div class="calendarWeekday" @onclick="() => occupy(4,5)" id=@statuses[4,5]>@textLabels[4,5]</div>
						<div class="calendarWeekday" @onclick="() => occupy(4,6)" id=@statuses[4,6]>@textLabels[4,6]</div>
					</div>
					<div class="calendarHourRow">
						<div class="calendarWeekday" id="time">3:00pm</div>
						<div class="calendarWeekday" @onclick="() => occupy(5,0)" id=@statuses[5,0]>@textLabels[5,0]</div>
						<div class="calendarWeekday" @onclick="() => occupy(5,1)" id=@statuses[5,1]>@textLabels[5,1]</div>
						<div class="calendarWeekday" @onclick="() => occupy(5,2)" id=@statuses[5,2]>@textLabels[5,2]</div>
						<div class="calendarWeekday" @onclick="() => occupy(5,3)" id=@statuses[5,3]>@textLabels[5,3]</div>
						<div class="calendarWeekday" @onclick="() => occupy(5,4)" id=@statuses[5,4]>@textLabels[5,4]</div>
						<div class="calendarWeekday" @onclick="() => occupy(5,5)" id=@statuses[5,5]>@textLabels[5,5]</div>
						<div class="calendarWeekday" @onclick="() => occupy(5,6)" id=@statuses[5,6]>@textLabels[5,6]</div>
					</div>
					<div class="calendarHourRow">
						<div class="calendarWeekday" id="time">4:00pm</div>
						<div class="calendarWeekday" @onclick="() => occupy(6,0)" id=@statuses[6,0]>@textLabels[6,0]</div>
						<div class="calendarWeekday" @onclick="() => occupy(6,1)" id=@statuses[6,1]>@textLabels[6,1]</div>
						<div class="calendarWeekday" @onclick="() => occupy(6,2)" id=@statuses[6,2]>@textLabels[6,2]</div>
						<div class="calendarWeekday" @onclick="() => occupy(6,3)" id=@statuses[6,3]>@textLabels[6,3]</div>
						<div class="calendarWeekday" @onclick="() => occupy(6,4)" id=@statuses[6,4]>@textLabels[6,4]</div>
						<div class="calendarWeekday" @onclick="() => occupy(6,5)" id=@statuses[6,5]>@textLabels[6,5]</div>
						<div class="calendarWeekday" @onclick="() => occupy(6,6)" id=@statuses[6,6]>@textLabels[6,6]</div>
					</div>
				</div>
			</main>
		</div>
	</div>
</div>

@code {
	public string name = "";
	public string email = "";
	public string ucid = "";
	public string selectedDate = "YYYY-MM-DD";
	public String formattedDate = "YYYYMMDD";
	public DateTime selectedStartTime { get; set; }
	public DateTime selectedEndTime { get; set; }
	public string nameErrorClass = "";
	public string emailErrorClass = "";
	public string ucidErrorClass = "";
	public string dateErrorClass = "";
	public string isNewUser { get; set; } = "false";
	public int currentWorkflowStep { get; set; } = -1;

	[Parameter]
	public String MachineName { get; set;}

	public string calendar(string title, string dates, string time, string desc) {
		string baseHref = "https://calendar.google.com/calendar/r/eventedit?";

		Regex noSpace = new Regex(@"\s+");

		string eventName = "text=" + noSpace.Replace(title, "+");


		string parsedDate = DateTime.Parse(dates).ToString("yyyyMMdd");
		//string temp = time.Substring(0, time.IndexOf(" "));
		string[] times = time.Split('-');

		string parsedTime1 = DateTime.Parse(times[0]).ToString("HHmmss");
		string parsedTime2 = DateTime.Parse(times[1]).ToString("HHmmss");

		string date = "&dates=" + parsedDate + "T" + parsedTime1 + "/" + parsedDate + "T" + parsedTime2;

		string description = "&details=" + noSpace.Replace(desc, "+");
		string location = "&location=Taylor+Family+Digital+Library,+410+University+Ct+NW,+Calgary,+AB+T2N+1N4,+Canada";

		return baseHref + eventName + date + description + location;
	}

	private void calendarRedirect(string title, string date, string time, string desc) {
		string redirect = calendar(title, date, time, desc);
		NavMan.NavigateTo(redirect);
	}

	protected override void OnInitialized()
	{
		try
		{
			isNewUser = sessionStorage.GetItem<string>("isNewUser");
			currentWorkflowStep = int.Parse(sessionStorage.GetItem<string>("currentWorkflowStep"));
		} catch (Exception)
		{
			Console.WriteLine("failed to read session data");
		}

		Console.WriteLine($"Value for isNewUser = {isNewUser}");
		Console.WriteLine($"Value for currentWorkflowStep = {currentWorkflowStep}");
	}

	public string[] completedSafety = new string[] { "12345678", "87654321", "34509876" };
	public bool ucidCompletedSafety(string ucid) {
		foreach (string id in completedSafety){
			if (ucid.Equals(id)){
				return true;
			}
		}
		return false;
	}

	public bool validUCID(string ucid) {
		Regex rx = new Regex(@"^[0-9]*$", RegexOptions.Compiled);
		bool match = rx.IsMatch(ucid);
		if (ucid.Length == 8 && match) {
			return true;
		} else {
			return false;
		}
	}

	private String[,] statuses =
			{{"p", "x", "p", "p", "o", "t", "t"},
			{"p", "x", "t", "o", "o", "t", "t"},
			{"p", "x", "t", "t", "o", "t", "o"},
			{"p", "x", "p", "t", "o", "o", "t"},
			{"p", "x", "t", "t", "o", "t", "t"},
			{"t", "x", "t", "o", "o", "t", "o"},
			{"t", "x", "p", "o", "o", "t", "o"}};
	private String[,] textLabels =
			{{"", "Out of Order", "", "", "", "Booked", "Booked"},
			{"", "", "Booked", "", "", "", ""},
			{"", "", "", "Booked", "", "", ""},
			{"", "", "", "", "", "", "Booked"},
			{"", "", "Booked", "", "", "Booked", ""},
			{"Booked", "", "", "", "", "", ""},
			{"", "", "", "", "", "", ""}};
	private String wednesdayClass = "today";


	private String[] weekMain = {"SUN APR 17", "MON APR 18", "TUE APR 19", 
								"WED APR 20", "THU APR 21", "FRI APR 22", "SAT APR 23"};
	private String weekTitleMain = "2022 April 17 - 2022 April 23";
	private String[,] statusesMain =
			{{"p", "x", "p", "p", "o", "t", "t"},
			{"p", "x", "t", "o", "o", "t", "t"},
			{"p", "x", "t", "t", "o", "t", "o"},
			{"p", "x", "p", "t", "o", "o", "t"},
			{"p", "x", "t", "t", "o", "t", "t"},
			{"t", "x", "t", "o", "o", "t", "o"},
			{"t", "x", "p", "o", "o", "t", "o"}};
	private String[,] textLabelsMain =
			{{"", "Out of Order", "", "", "", "Booked", "Booked"},
			{"", "", "Booked", "", "", "", ""},
			{"", "", "", "Booked", "", "", ""},
			{"", "", "", "", "", "", "Booked"},
			{"", "", "Booked", "", "", "Booked", ""},
			{"Booked", "", "", "", "", "", ""},
			{"", "", "", "", "", "", ""}};
	private String[] weekPrev = {"SUN APR 10", "MON APR 11", "TUE APR 12", 
								"WED APR 13", "THU APR 14", "FRI APR 15", "SAT APR 16"};
	private String weekTitlePrev = "2022 April 10 - 2022 April 16";
	private String[,] statusesPrev =
			{{"x", "x", "p", "p", "t", "t", "t"},
			{"x", "x", "t", "p", "t", "t", "p"},
			{"x", "x", "t", "t", "t", "p", "p"},
			{"x", "x", "t", "t", "p", "p", "t"},
			{"x", "x", "t", "t", "t", "t", "t"},
			{"x", "x", "t", "t", "t", "t", "t"},
			{"x", "x", "t", "t", "p", "t", "p"}};
	private String[,] textLabelsPrev =
			{{"Out of Order", "Out of Order", "", "", "Booked", "Booked", "Booked"},
			{"", "", "Booked", "", "", "", ""},
			{"", "", "", "Booked", "", "", ""},
			{"", "", "", "", "", "", "Booked"},
			{"", "", "Booked", "", "Booked", "Booked", ""},
			{"", "", "", "", "", "", ""},
			{"", "", "", "", "", "", ""}};
	private String[] weekNext = {"SUN APR 24", "MON APR 25", "TUE APR 26", 
								"WED APR 27", "THU APR 28", "FRI APR 29", "SAT APR 30"};
	private String weekTitleNext = "2022 April 24 - 2022 April 30";
	private String[,] statusesNext =
			{{"x", "x", "o", "o", "o", "o", "t"},
			{"x", "x", "t", "o", "o", "o", "o"},
			{"x", "x", "t", "o", "o", "o", "o"},
			{"x", "x", "t", "o", "o", "o", "t"},
			{"x", "x", "t", "o", "t", "t", "t"},
			{"x", "x", "t", "o", "t", "t", "t"},
			{"x", "x", "t", "o", "o", "t", "o"}};
	private String[,] textLabelsNext =
			{{"Out of Order", "Out of Order", "", "", "", "", "Booked"},
			{"", "", "Booked", "", "", "", ""},
			{"", "", "", "", "", "", ""},
			{"", "", "", "", "", "", "Booked"},
			{"", "", "Booked", "", "Booked", "Booked", ""},
			{"", "", "", "", "", "", ""},
			{"", "", "", "", "", "", ""}};
	private String[] currentweek = {"SUN APR 17", "MON APR 18", "TUE APR 19", 
								"WED APR 20", "THU APR 21", "FRI APR 22", "SAT APR 23"};
	private String currentWeekTitle = "2022 April 17 - 2022 April 23";

	private void nextWeek(String sunday){
		if (sunday.Equals("SUN APR 17", StringComparison.Ordinal)){
			currentweek = weekNext;
			currentWeekTitle = weekTitleNext;
			statuses = statusesNext;
			textLabels = textLabelsNext;
			wednesdayClass = "";
		}
		else if (sunday.Equals("SUN APR 10", StringComparison.Ordinal)){
			currentweek = weekMain;
			currentWeekTitle = weekTitleMain;
			statuses = statusesMain;
			textLabels = textLabelsMain;
			wednesdayClass = "today";
		}
	}

	private void prevWeek(String sunday){
		if (sunday.Equals("SUN APR 17", StringComparison.Ordinal)){
			currentweek = weekPrev;
			currentWeekTitle = weekTitlePrev;
			statuses = statusesPrev;
			textLabels = textLabelsPrev;
			wednesdayClass = "";
		}
		else if (sunday.Equals("SUN APR 24", StringComparison.Ordinal)){
			currentweek = weekMain;
			currentWeekTitle = weekTitleMain;
			statuses = statusesMain;
			textLabels = textLabelsMain;
			wednesdayClass = "today";
		}
	}

	private String selectDate(int weekdayInd, String sunday){
		if (sunday.Equals("SUN APR 17", StringComparison.Ordinal)){
			return "2022-04-" + (17 + weekdayInd).ToString();
		}
		else if (sunday.Equals("SUN APR 10", StringComparison.Ordinal)){
			return "2022-04-" + (10 + weekdayInd).ToString();
		}
		else{
			return "2022-04-" + (24 + weekdayInd).ToString();
		}
	}

	private DateTime selectTime(int hourInd){
		return DateTime.Parse((10 + hourInd).ToString() + ":00:00", System.Globalization.CultureInfo.CurrentCulture);

	}


	private void clearPreviousStart(int hourInd, int weekdayInd){
		for (int i = 0; i < 7; i++){
			if (i != weekdayInd){
				for (int j = 0; j < 7; j++){
					if (statuses[j, i].Equals("s", StringComparison.Ordinal)){
						statuses[j, i] = "o";
					}
				}
			}
			else{
				for (int j = hourInd; j < 7; j++){
					if (statuses[j, i].Equals("s", StringComparison.Ordinal)){
						statuses[j, i] = "o";
					}
				}
			}

		}
	}

	private Boolean blockage(int start, int end, int weekdayInd){
		for (int i = start+1; i <= end; i++){
			if (!statuses[i, weekdayInd].Equals("o", StringComparison.Ordinal) &&
				!statuses[i, weekdayInd].Equals("s", StringComparison.Ordinal)
			){
				return true;
			}
		}
		return false;
	}


	private int[] startSelected = {8, 8};
	private void occupy(int hourInd, int weekdayInd)
	{
		if (statuses[hourInd, weekdayInd].Equals("o", StringComparison.Ordinal) ||
		statuses[hourInd, weekdayInd].Equals("s", StringComparison.Ordinal))
		{
			if (startSelected[0] < hourInd && startSelected[1] == weekdayInd){
				if (!blockage(startSelected[0], hourInd, weekdayInd)){
					for (int i = startSelected[0]; i <= hourInd; i++){
						statuses[i, weekdayInd] = "s";
					}
					selectedEndTime = selectTime(hourInd + 1);
					clearPreviousStart(hourInd +1, weekdayInd);
				}
			}

			else {
				clearPreviousStart(hourInd, weekdayInd);
				statuses[hourInd, weekdayInd] = "s";

				selectedDate = selectDate(weekdayInd, currentweek[0]);
				selectedStartTime = selectTime(hourInd);
				selectedEndTime = selectTime(hourInd + 1);
				startSelected[0] = hourInd;
				startSelected[1] = weekdayInd;
			}
		}
	}

	public void disableCalendar(){
		for (int i = 0; i < 7; i++){
			for (int j = 0; j < 7; j++){
				if (statuses[i,j].Equals("o", StringComparison.Ordinal)){
					statuses[i,j]="p";
				}
				else if (statuses[i,j].Equals("s", StringComparison.Ordinal)){
					statuses[i,j]="c";
				}
			}
		}
	}

	public bool validEmail(string email) 
	{
		return email.Contains(@"@ucalgary.ca");
	}

	public Boolean isBooked = false;
	public String times { get; set; }
	public String confirmationMessage { get; set;}
	public String descriptionMessage { get; set;}

	public void book(String nameEntered, String emailEntered, String ucidEntered){
		// check for missing form inputs
		if ((nameEntered == "") || (emailEntered == "") || (!validEmail(emailEntered)) || (ucidEntered == "") || selectedDate.Equals("YYYY-MM-DD", StringComparison.Ordinal))
		{
			if (nameEntered == "")
			{
				nameErrorClass = "is-invalid";
			}
			else
			{
				nameErrorClass = "";
			}

			if ((emailEntered == "") || (!validEmail(emailEntered)))
			{
				emailErrorClass = "is-invalid";
			}
			else
			{
				emailErrorClass = "";
			}

			if (ucidEntered == "")
			{
				ucidErrorClass = "is-invalid";
			}
			else
			{
				ucidErrorClass = "";
			}

			if (selectedDate.Equals("YYYY-MM-DD", StringComparison.Ordinal))
			{
				dateErrorClass = "is-invalid";
			}
			else
			{
				dateErrorClass = "";
			}
			return;
		}

		if (ucidCompletedSafety(ucidEntered)){
			isBooked = true;

			disableCalendar();
			times = selectedStartTime.ToString("hh:mm tt")+ " - " + selectedEndTime.ToString("hh:mm tt");
			times = times.Replace(".","").Replace(" ", "").ToUpper();
			string[] dateComponents = selectedDate.ToString().Split('-');
			descriptionMessage = ("Your booking for the " + MachineName + " at the Taylor Family Digital Library."); 
			formattedDate = new DateTime(Int32.Parse(dateComponents[0]), Int32.Parse(dateComponents[1]), Int32.Parse(dateComponents[2])).ToLongDateString();
			String bookingMessage = "Your booking for " + formattedDate
				+ " from " + times + " (MST) has been completed.";
			confirmationMessage = bookingMessage;
			// if the user is successful, also advance their 'getting started'
			// sidebar state if needed
			if (isNewUser == "true")
			{
				sessionStorage.SetItem("currentWorkflowStep", "3");
				currentWorkflowStep = 3;
			}
		}
	}
}
