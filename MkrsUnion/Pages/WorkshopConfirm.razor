@page "/workshopconfirm/{title}/{date}/{time}/{loc}/{description}/{imgnum:int}"
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage

@using System;
@using System.Text.RegularExpressions;
@inject NavigationManager NavMan;

<div class="text-center">
    <h1>@title</h1>
</div>
<div class="layout">
    @if(isNewUser == "true") {
        <Workflow
            CurrentStep="currentWorkflowStep"
        />
    }
    <div class="back">
        <button type="button" onclick="history.back()" class="btn btn-danger">Back</button>
    </div>

    <div class="container">
        <p style="color: dimgray;">@description</p>
        <div class="form-wrapper">
            <div class="form">
                <div class="mb-3 row" hidden=@hide>
                    <label for="staticDate" class="col-sm-2 col-form-label">Date:</label>
                    <div class="col-sm-10">
                        <input class="form-control form-control-sm" type="text" value="@date" disabled readonly>
                    </div>

                    <label for="staticDate" class="col-sm-2 col-form-label">Time:</label>
                    <div class="col-sm-10">
                        <input class="form-control form-control-sm" type="text" value="@time" disabled readonly>
                    </div>

                    <label for="staticDate" class="col-sm-2 col-form-label">Location:</label>
                    <div class="col-sm-10">
                        <input class="form-control form-control-sm" type="text" value="@loc" disabled readonly>
                    </div>

                </div>
	            <div class="row" hidden=@hide>
		            <label class="col-sm-2 col-form-label">Name</label>
		            <div class="col-sm-10 mb-3">
			            <input type="text" class="form-control @nameErrorClass" @bind=@name/>
                        @if (nameErrorClass != "")
                        {
                           <div class="invalid-feedback">Please provide your name.</div>
                        }
                    </div>
                    <label class="col-sm-2 col-form-label">Email</label>
		            <div class="col-sm-10 mb-3">
			            <input type="text" class="form-control @emailErrorClass" @bind=@email/>
                        @if (emailErrorClass != "")
                        {
                           <div class="invalid-feedback">Please provide your UCalgary email.</div>
                        }
		            </div>
                    <label class="col-sm-2 col-form-label">UCID</label>
                    <div class="col-sm-10 mb-3">
			            <input type="text" class="form-control @ucidErrorClass" @bind-value=@ucid @bind-value:event="oninput"/>
                        @if (ucidErrorClass != "")
                        {
                           <div class="invalid-feedback">Please provide your UCID.</div>
                        }

                        @if (validUCID(@ucid)) {
                            if (ucidCompletedSafety(@ucid) && !@title.Contains("Safety")){
                                <p id="completed">Safety orientation completed</p>
                            } else if (!@title.Contains("Safety")) {
                                <p id="noSafety">
                                    The UCID you have entered has not completed the mandatory
                                    safety orientation. Please sign up for one through the workshop
                                    & Events page.
                                </p>
                            }
                        } else if (!(ucid.Length == 8) && ucid.Length > 0) {
                            <p id="noSafety">Not valid UCID</p>
                        }
                    </div>
                </div>
                <a class="btn btn-primary" role="button" onclick="@(() => handleSignup(@title))" hidden=@hide>Confirm</a>
                @if (hide) {
                    <div class="mb-3 row">
                        <b>
                            <p> Your booking for @title was successful. You are booked for:</p>
                            <ul>
                                <li>Date: @date</li>
                                <li>Time: @time</li>
                                <li>Location: @loc</li>
                            </ul>
                        </b>
                        <div class="row justify-content-between"> 
                            <button class="btn col-3" id="cal" @onclick="@(() => calendarRedirect(@title, @date, @time, @description))">
                                Add to Calendar
                            </button>
                            <button class="btn col-3" id="home" @onclick="@(()=>NavMan.NavigateTo("/"))">
                                Back to Homepage
                            </button>
                        </div>
                    </div>
                }
            </div>

            <div class="image">
                @if (@imgnum == 1 || @imgnum == 3) {
                    <img src="images/safetyworkshop.jpg" width="500" height="325"/>
                } else if (imgnum == 2) {
                    <img src="images/3dworkshop.jpg" width="500" height="325"/>
                }
            </div>
        </div>
    </div>
</div>

@code {
    public string name = "";
    public string email = "";
    public string ucid = "";
    public bool hide = false;
    public string href = "";

    public string nameErrorClass = "";
    public string emailErrorClass = "";
    public string ucidErrorClass = "";

    public string isNewUser { get; set; } = "false";
    public int currentWorkflowStep { get; set; } = -1;

    protected override void OnInitialized()
    {
        try
        {
            isNewUser = sessionStorage.GetItem<string>("isNewUser");
            currentWorkflowStep = int.Parse(sessionStorage.GetItem<string>("currentWorkflowStep"));
        } catch (Exception)
        {
            Console.WriteLine("failed to read session data");
        }

        Console.WriteLine($"Value for isNewUser = {isNewUser}");
        Console.WriteLine($"Value for currentWorkflowStep = {currentWorkflowStep}");
    }

    // determines if the user's signup was successful and
    // does any tidying necessary when that happens
    public void handleSignup(string title) {
        // check for missing form inputs
        if ((name == "") || (email == "") || (!validEmail(email)) || (ucid == ""))
        {
            if (name == "")
            {
                nameErrorClass = "is-invalid";
            }
            else
            {
                nameErrorClass = "";
            }

            if ((email == "") || (!validEmail(email)))
            {
                emailErrorClass = "is-invalid";
            }
            else
            {
                emailErrorClass = "";
            }

            if (ucid == "")
            {
                ucidErrorClass = "is-invalid";
            }
            else
            {
                ucidErrorClass = "";
            }
            return;
        }

        if (validUCID(ucid)) {


            // if the user is successful, also advance their 'getting started'
            // sidebar state if needed
            if (isNewUser == "true")
            {
                sessionStorage.SetItem("currentWorkflowStep", "1");
                currentWorkflowStep = 1;
                hide = true;
            } else if (ucidCompletedSafety(ucid)) {
                hide = true;
            } else if (title.Contains("Safety")){
                hide = true;
            }
        }
    }

    public string[] completedSafety = new string[] { "12345678", "87654321", "34509876" };
    public bool ucidCompletedSafety(string ucid) {
        foreach (string id in completedSafety){
            if (ucid.Equals(id)){
                return true;
            }
        }
        return false;
    }

    public bool validUCID(string ucid) {
        Regex rx = new Regex(@"^[0-9]*$", RegexOptions.Compiled);
        bool match = rx.IsMatch(ucid);
        if (ucid.Length == 8 && match) {
            return true;
        } else {
            return false;
        }
    }

    public bool validEmail(string email)
    {
        return email.Contains(@"@ucalgary.ca");
    }

    bool notEmpty (string s) {
        return (s == string.Empty);
    }

    public string calendar(string title, string dates, string time, string desc) {
        string baseHref = "https://calendar.google.com/calendar/r/eventedit?";

        Regex noSpace = new Regex(@"\s+");

        string eventName = "text=" + noSpace.Replace(title, "+");


        string parsedDate = DateTime.Parse(dates).ToString("yyyyMMdd");
        string temp = time.Substring(0, time.IndexOf(" "));
        string[] times = temp.Split('-');

        string parsedTime1 = DateTime.Parse(times[0]).ToString("HHmmss");
        string parsedTime2 = DateTime.Parse(times[1]).ToString("HHmmss");

        string date = "&dates=" + parsedDate + "T" + parsedTime1 + "/" + parsedDate + "T" + parsedTime2;

        string description = "&details=" + noSpace.Replace(desc, "+");
        string location = "&location=Taylor+Family+Digital+Library,+410+University+Ct+NW,+Calgary,+AB+T2N+1N4,+Canada";

        return baseHref + eventName + date + description + location;
    }

    private void calendarRedirect(string title, string date, string time, string desc) {
        string redirect = calendar(title, date, time, desc);
        NavMan.NavigateTo(redirect);
    }

    [Parameter]
    public int? imgnum { get; set; }

    [Parameter]
    public string? title { get; set; }

    [Parameter]
    public string? date { get; set; }

    [Parameter]
    public string? time { get; set; }

    [Parameter]
    public string? loc { get; set; }

    [Parameter]
    public string? description { get; set; }
}
